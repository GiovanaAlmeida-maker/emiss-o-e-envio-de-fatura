from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import os
import re
import xml.etree.ElementTree as ET
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import unittest

# --- Configurações iniciais ---

app = Flask(__name__)
db_path = os.path.join(os.getcwd(), 'database.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['TESTING'] = True
db = SQLAlchemy(app)

# --- MODELOS ---

class Pedido(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    cliente = db.Column(db.String(100))
    valor = db.Column(db.Float)
    data = db.Column(db.DateTime, default=datetime.utcnow)

class Fatura(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    pedido_id = db.Column(db.Integer, db.ForeignKey('pedido.id'))
    pdf_path = db.Column(db.String(200))
    xml_path = db.Column(db.String(200))

# --- FUNÇÕES UTILITÁRIAS ---

def gerar_pdf(pedido):
    try:
        os.makedirs("notas", exist_ok=True)
        path = os.path.join("notas", f"nota_{pedido.id}.pdf")
        c = canvas.Canvas(path, pagesize=letter)
        c.setFont("Helvetica", 12)
        c.drawString(100, 750, "Nota Fiscal PDF")
        c.drawString(100, 730, f"Cliente: {pedido.cliente}")
        c.drawString(100, 710, f"Valor: R${pedido.valor:.2f}")
        c.drawString(100, 690, f"Data: {pedido.data.strftime('%d/%m/%Y %H:%M')}")
        c.save()
        return path
    except Exception as e:
        raise RuntimeError(f"Erro ao gerar PDF: {e}")

def gerar_xml(pedido):
    try:
        os.makedirs("notas", exist_ok=True)
        path = os.path.join("notas", f"nota_{pedido.id}.xml")
        nota = ET.Element('nota')
        cliente = ET.SubElement(nota, 'cliente')
        cliente.text = pedido.cliente
        valor = ET.SubElement(nota, 'valor')
        valor.text = f"{pedido.valor:.2f}"
        data = ET.SubElement(nota, 'data')
        data.text = pedido.data.strftime('%Y-%m-%d %H:%M')
        arvore = ET.ElementTree(nota)
        arvore.write(path, encoding='utf-8', xml_declaration=True)
        return path
    except Exception as e:
        raise RuntimeError(f"Erro ao gerar XML: {e}")

def validar_cliente(cliente):
    if not cliente or not isinstance(cliente, str) or cliente.strip() == '':
        return False, "Cliente inválido ou vazio."
    return True, ""

def validar_valor(valor):
    try:
        val = float(valor)
        if val <= 0:
            return False, "Valor deve ser positivo."
        return True, ""
    except (ValueError, TypeError):
        return False, "Valor deve ser numérico."

def validar_email(email):
    padrao = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    if not email or not re.match(padrao, email):
        return False, "Email inválido."
    return True, ""

def enviar_email(destinatario, pdf_path, xml_path):
    # Implementação real poderia usar smtplib ou serviços externos
    print(f"[SIMULADO] Enviando e-mail para {destinatario} com anexos {pdf_path} e {xml_path}")

# --- ROTAS ---

@app.route('/emitir_fatura', methods=['POST'])
def emitir_fatura():
    dados = request.json
    cliente = dados.get('cliente')
    valor = dados.get('valor')

    valido, msg = validar_cliente(cliente)
    if not valido:
        return jsonify({'erro': msg}), 400

    valido, msg = validar_valor(valor)
    if not valido:
        return jsonify({'erro': msg}), 400

    try:
        pedido = Pedido(cliente=cliente, valor=valor)
        db.session.add(pedido)
        db.session.commit()

        pdf_path = gerar_pdf(pedido)
        xml_path = gerar_xml(pedido)

        fatura = Fatura(pedido_id=pedido.id, pdf_path=pdf_path, xml_path=xml_path)
        db.session.add(fatura)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        return jsonify({'erro': f'Erro ao processar a fatura: {e}'}), 500

    return jsonify({'mensagem': 'Fatura emitida com sucesso!', 'pedido_id': pedido.id})

@app.route('/historico_pedidos', methods=['GET'])
def historico_pedidos():
    pedidos = Pedido.query.all()
    return jsonify([
        {'id': p.id, 'cliente': p.cliente, 'valor': p.valor, 'data': p.data.strftime('%Y-%m-%d %H:%M')} for p in pedidos
    ])

@app.route('/nota_fiscal/<int:pedido_id>', methods=['GET'])
def nota_fiscal(pedido_id):
    fatura = Fatura.query.filter_by(pedido_id=pedido_id).first()
    if not fatura:
        return jsonify({'erro': 'Fatura não encontrada'}), 404
    return jsonify({'pdf': fatura.pdf_path, 'xml': fatura.xml_path})

@app.route('/enviar_nota/<int:pedido_id>', methods=['POST'])
def enviar_nota(pedido_id):
    fatura = Fatura.query.filter_by(pedido_id=pedido_id).first()
    if not fatura:
        return jsonify({'erro': 'Fatura não encontrada'}), 404

    dados = request.json
    email_destino = dados.get('email')

    valido, msg = validar_email(email_destino)
    if not valido:
        return jsonify({'erro': msg}), 400

    try:
        enviar_email(email_destino, fatura.pdf_path, fatura.xml_path)
    except Exception as e:
        return jsonify({'erro': f'Erro ao enviar o e-mail: {e}'}), 500

    return jsonify({'mensagem': f'Nota enviada com sucesso para {email_destino}'})

# --- TESTES ---

class TesteRotas(unittest.TestCase):
    def setUp(self):
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
        app.config['TESTING'] = True
        self.app = app.test_client()
        with app.app_context():
            db.create_all()

    def tearDown(self):
        with app.app_context():
            db.session.remove()
            db.drop_all()

    def test_emitir_fatura(self):
        resposta = self.app.post('/emitir_fatura', json={'cliente': 'João', 'valor': 150.75})
        self.assertEqual(resposta.status_code, 200)
        dados = resposta.get_json()
        self.assertIn('pedido_id', dados)

    def test_emitir_fatura_invalido(self):
        resposta = self.app.post('/emitir_fatura', json={'cliente': '', 'valor': -10})
        self.assertEqual(resposta.status_code, 400)
        dados = resposta.get_json()
        self.assertIn('erro', dados)

    def test_historico_pedidos(self):
        self.app.post('/emitir_fatura', json={'cliente': 'Maria', 'valor': 99.90})
        resposta = self.app.get('/historico_pedidos')
        self.assertEqual(resposta.status_code, 200)
        self.assertGreaterEqual(len(resposta.get_json()), 1)

    def test_nota_fiscal(self):
        emitido = self.app.post('/emitir_fatura', json={'cliente': 'Carlos', 'valor': 200.00})
        pedido_id = emitido.get_json()['pedido_id']
        resposta = self.app.get(f'/nota_fiscal/{pedido_id}')
        self.assertEqual(resposta.status_code, 200)
        dados = resposta.get_json()
        self.assertIn('pdf', dados)
        self.assertIn('xml', dados)

    def test_nota_fiscal_inexistente(self):
        resposta = self.app.get('/nota_fiscal/9999')
        self.assertEqual(resposta.status_code, 404)

    def test_enviar_nota(self):
        emitido = self.app.post('/emitir_fatura', json={'cliente': 'Ana', 'valor': 300.00})
        pedido_id = emitido.get_json()['pedido_id']
        resposta = self.app.post(f'/enviar_nota/{pedido_id}', json={'email': 'ana@teste.com'})
        self.assertEqual(resposta.status_code, 200)
        self.assertIn('mensagem', resposta.get_json())

    def test_enviar_nota_email_invalido(self):
        emitido = self.app.post('/emitir_fatura', json={'cliente': 'Ana', 'valor': 300.00})
        pedido_id = emitido.get_json()['pedido_id']
        resposta = self.app.post(f'/enviar_nota/{pedido_id}', json={'email': 'ana_teste.com'})
        self.assertEqual(resposta.status_code, 400)
        dados = resposta.get_json()
        self.assertIn('erro', dados)

    def test_enviar_nota_fatura_inexistente(self):
        resposta = self.app.post('/enviar_nota/9999', json={'email': 'teste@teste.com'})
        self.assertEqual(resposta.status_code, 404)

# --- RODAR SERVIDOR OU TESTES ---

if __name__ == '__main__':
    import sys
    if 'test' in sys.argv:
        unittest.main(argv=[sys.argv[0]])
    else:
        with app.app_context():
            if not os.path.exists(db_path):
                db.create_all()
        app.run(debug=False)
